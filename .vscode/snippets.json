{
  // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and \${1:label}, \${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  "Print to console": {
    "scope": "javascript,typescript",
    "prefix": "cl",
    "body": ["console.log('$1');", "$2"],
    "description": "Log output to console"
  },
  "Print": {
    "scope": "javascript,typescript",
    "prefix": "clg",
    "body": ["console.log($1);", "$2"],
    "description": "Log output to console"
  },
  "Arrow Function": {
    "prefix": "afn",
    "body": ["const $1 = ($2) => {", " $3", "};"],
    "description": "ES6 arrow function"
  },

  "React Arrow Function Component with Export and Filename": {
    "prefix": "rafce",
    "body": [
      "import React from 'react';",
      "",
      "const ${1:${TM_FILENAME_BASE}} = () => {",
      "  return (",
      "    $2",
      "  );",
      "};",
      "",
      "export default ${1:${TM_FILENAME_BASE}};"
    ],
    "description": "React arrow function component with export and filename"
  },
  "useState": {
    "prefix": "useState",
    "body": [
      "const [${1:state}, set${1/(.*)/${1:/capitalize}/}] = useState(${2:initialState});"
    ],
    "description": "useState hook"
  },
  "imr useState": {
    "prefix": "imruseState",
    "body": ["import  { useState } from 'react';"],
    "description": "import useState hook"
  },
  "imr useEffect": {
    "prefix": "imruseEffect",
    "body": ["import  { useEffect } from 'react';"],
    "description": "import useEffect hook"
  },
  "imr useContext": {
    "prefix": "imruseContext",
    "body": ["import  { useContext } from 'react';"],
    "description": "import useContext hook"
  },
  "imr useReducer": {
    "prefix": "imruseReducer",
    "body": ["import { useReducer } from 'react';"],
    "description": "import useReducer hook"
  },
  "imr useCallback": {
    "prefix": "imruseCallback",
    "body": ["import  { useCallback } from 'react';"],
    "description": "import useCallback hook"
  },
  "imr useMemo": {
    "prefix": "imruseMemo",
    "body": ["import  { useMemo } from 'react';"],
    "description": "import useMemo hook"
  },
  "imr useRef": {
    "prefix": "imruseRef",
    "body": ["import React, { useRef } from 'react';"],
    "description": "import useRef hook"
  },
  "imr useImperativeHandle": {
    "prefix": "imruseImperativeHandle",
    "body": ["import  { useImperativeHandle } from 'react';"],
    "description": "import useImperativeHandle hook"
  },
  "imr useLayoutEffect": {
    "prefix": "imruseLayoutEffect",
    "body": ["import  { useLayoutEffect } from 'react';"],
    "description": "import useLayoutEffect hook"
  },
  "imr useDebugValue": {
    "prefix": "imruseDebugValue",
    "body": ["import  { useDebugValue } from 'react';"],
    "description": "import useDebugValue hook"
  },

  "useEffect": {
    "prefix": "useEffect",
    "body": [
      "useEffect(() => {",
      "  ${1:// effect code here}",
      "  return () => {",
      "    ${2:// cleanup code here}",
      "  };",
      "}, [${3:dependency}]);",
      "$4"
    ],
    "description": "React useEffect hook"
  },
  "useRef": {
    "prefix": "useRef",
    "body": ["const ${1:refName} = useRef();", "$2"],
    "description": "React useRef hook"
  },
  "useCallback": {
    "prefix": "useCallback",
    "body": [
      "const ${1:callbackName} = useCallback((${2:params}) => {",
      "  ${3:// function body}",
      "}, [${4:dependencies}]);",
      "$5"
    ],
    "description": "React useCallback hook"
  },
  "useMemo": {
    "prefix": "useMemo",
    "body": [
      "const ${1:memoName} = useMemo(() => {",
      "  ${2:// memoized value}",
      "}, [${3:dependencies}]);",
      "$4"
    ],
    "description": "React useMemo hook"
  },
  "useReducer": {
    "prefix": "useReducer",
    "body": [
      "const [${1:state}, dispatch] = useReducer(${2:reducer}, ${3:initialState});",
      "$4"
    ],
    "description": "React useReducer hook"
  },
  "useContext": {
    "prefix": "useContext",
    "body": ["const ${1:contextValue} = useContext(${2:Context});", "$3"],
    "description": "React useContext hook"
  },
  "useCallbackAndMemo": {
    "prefix": "useCallbackAndMemo",
    "body": [
      "const ${1:callbackName} = useCallback((${2:params}) => {",
      "  ${3:// function body}",
      "}, [${4:dependencies}]);",
      "",
      "const ${5:memoName} = useMemo(() => {",
      "  ${6:// memoized value}",
      "}, [${7:dependencies}]);",
      "",
      "$8"
    ],
    "description": "React useCallback and useMemo hooks"
  },
  " ract": {
    "prefix": "ract",
    "body": [
      "import { connect } from 'react-redux';",
      "",
      "const ${1:ComponentName} = ({ ${2:data} }) => {",
      "  ${3:// component code}",
      "};",
      "",
      "const mapStateToProps = (state) => ({ ${4:data}: state.${4:data} });",
      "",
      "export default connect(mapStateToProps)(${1:ComponentName});"
    ],
    "description": "React component with Redux connect"
  },
  "ramd": {
    "prefix": "ramd",
    "body": [
      "const ${1:actionName} = (${2:params}) => ({",
      "  type: '${3:ACTION_TYPE}',",
      "  ${4:payload}",
      "});"
    ],
    "description": "Redux action creator"
  },
  "rtr": {
    "prefix": "rtr",
    "body": [
      "import { ${1:combineReducers} } from 'redux';",
      "",
      "const ${2:reducerName} = (state = ${3:initialState}, action) => {",
      "  switch (action.type) {",
      "    case '${4:ACTION_TYPE}':",
      "      return { ...state, ${5:data}: action.${5:data} };",
      "    default:",
      "      return state;",
      "  }",
      "};",
      "",
      "export default ${1:combineReducers}({ ${6:reducer}: ${2:reducerName} });"
    ],
    "description": "Redux reducer"
  },
  "rsc": {
    "prefix": "rsc",
    "body": [
      "import { createStore, applyMiddleware } from 'redux';",
      "import ${1:reducer} from './${1:reducer}';",
      "",
      "const middleware = [${2:/* middleware here */}];",
      "",
      "const store = createStore(${1:reducer}, applyMiddleware(...middleware));",
      "",
      "export default store;"
    ],
    "description": "Redux store"
  },
  "rth": {
    "prefix": "rth",
    "body": [
      "import { createAsyncThunk } from '@reduxjs/toolkit';",
      "",
      "export const ${1:thunkName} = createAsyncThunk(",
      "  '${2:actionType}',",
      "  async (${3:params}) => {",
      "    ${4:// async code here}",
      "    return ${5:data};",
      "  }",
      ");"
    ],
    "description": "Redux Toolkit createAsyncThunk"
  },
  "rsli": {
    "prefix": "rsli",
    "body": [
      "import { createSlice } from '@reduxjs/toolkit';",
      "",
      "const ${1:sliceName} = createSlice({",
      "  name: '${2:sliceName}',",
      "  initialState: ${3:initialState},",
      "  reducers: {",
      "    ${4:reducerName}: (state, action) => {",
      "      ${5:// reducer code here}",
      "    },",
      "  },",
      "});",
      "",
      "export const { ${6:reducerName} } = ${1:sliceName}.actions;",
      "export default ${1:sliceName}.reducer;"
    ],
    "description": "Redux Toolkit create"
  }
}
